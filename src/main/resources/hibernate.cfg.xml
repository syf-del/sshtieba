<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <!-- 基本配置
            property 的name 若以 hibernate开头，则可以省略 hibernate ；两者一致，没区别。
        -->
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/tieba?serverTimezone=UTC</property>
        <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="connection.username">root</property>
        <property name="connection.password">123456</property>
        <!-- 指定数据库方言  ==>就是对流行的不同数据库有不同的支持！！！  方言来确定生成什么样的规范的sql语句
        MySQL5Dialect配合update可以自动建表与追加
        MySQL5InoDBDialect 则不能通过hibernate在数据库中创建表-->
        <property name="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</property>
        <!-- 是否显示sql语句 -->
        <property name="show_sql">true</property>
        <!--  是否格式化，不格式显示一样-->
        <property name="hibernate.format_sql">true</property>
        <!-- 是否显示注释， 用于提示 当前sql语句操作的对象 -->
        <property name="hibernate.use_sql_comments">true</property>

        <!-- DB schema will be updated if needed 如何创建表
        create 每次加载 cfg.xml文件，都将创建表 ，程序关闭时（factory.close），表不进行删除
            用于初始化，用于测试场景多  如果表存在，则先删除，后创建；
        create-drop 每次加载 cfg.xml文件，都将创建表 ，程序关闭时（factory.close），表进行删除
        update 如果表不存在，则创建；如果表已经存在，检查映射文件是否与表一致，如果不一致则更新表结构
            只添加，不删除
        validate 如果加载 cfg.xml文件，则校验 映射文件和数据是否匹配，如果匹配正常操作，如果不匹配抛异常
        ####todo 现实开发中，先有表再有映射文件

        先create创建 再改为update
        -->
        <!--<property name="hbm2ddl.auto">create</property>-->
        <property name="hbm2ddl.auto">update</property>
        <!--  配置映射文件
        <mapping resource="POJO/User.hbm.xml"/>
        -->
        <!-- 取消bean校验  -->
        <!--<property name="javax.persistence.volidation.mode">none</property>-->
        <!--     整合C3P0； hibernate有自己的连接池，但C3P0性能更好，专业   但这里配上报错  -->
        <!--<property name="hibernate.connection.provider_class">com.mchange.v2.c3p0.ComboPooledDataSource</property>-->
        <!-- 事务隔离级别 一共4种 2 0010   1 0001  4  0100  8 1000  -->
        <property name="hibernate.connection.isolation">4</property>
        <!-- todo 需掌握  将session绑定到本地线程中  属于session管理得三种方式之一 -->
        <property name="hibernate.current_session_context_class">thread</property>
        <!--  开启二级缓存  配置 -->
        <property name="hibernate.cache.use_second_level_cache">true</property>
        <!--  二级缓存提供商 -->
        <property name="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</property>
        <!--开启查询缓存 默认关闭-->
        <property name="hibernate.cache.use_query_cache">true</property>

        <mapping resource="Reply.hbm.xml"/>
        <mapping resource="Topic.hbm.xml"/>

        <!-- 二级配置缓存内容  -->

        <class-cache class="com.tieba.domain.Topic" usage="read-write"/>
        <class-cache class="com.tieba.domain.Reply" usage="read-write"/>
        <collection-cache collection="com.tieba.domain.Topic.replySet" usage="read-write"/>


    </session-factory>
</hibernate-configuration>